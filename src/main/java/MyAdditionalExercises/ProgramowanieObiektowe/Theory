      KLASA - Pewnego rodzaju szablon wg ktorego mozna tworzyc projekty
        - moze zawierac w sobie pola (zmienne) - np. private int rokProdukcji, public String markaSamochodu,...
        - moze zawierac w sobie metody - np. public void jedz(){}
              public - modyfikator dostepu
                void - czy klasa zwraca wartosc czy nie, jesli nie to void, jesli chcemy to podajemy zwracany typ
                tzn. String, int, itd.
                jedz - nazwa metody
                () - argumenty metody
                {} - cialo meotdy - tu podajemy instrukcje do wykonania
        - nie musi zawierac zadnych metod
        np.
        public class FirstAuto {

        }


      OBIEKT - Przedstawiciel danej klasy
        - dzieki obiektom bedziemy w stanie wywolywac metody z klasy w ktorej nie ma klasy specjalnej 'main'
        np.
        FirstStudent student1 = new FirstStudent();
            student1.imie = "Marcin";
            student1.nazwisko = "Petynia";

      METODA - blok ktory zawiera jakies instrukcje
      - mozna sie do niej odwolywac z innych klas
      np.
      public void nazwa() {
        cialo metody
      }

      KONSTRUKTORY - specjalne metody ktore zwracaja obiekt danej klasy i ktore sa wywolywane automatycznie
      podczas tworzenia obiektow

      POLA STATYCZNE - odnosza sie do samej klasy, a nie do samej klasy. Jest to pole charakterystyczne dla danej
      klasy i jest wspoldzielone przez wszystkie obiekty danej klasy. Odwolujemy sie do niego poprzez
      nazweKlasy.nazwaPolaStatycznego
      Deklaracja i inicjalizacja pola statycznego -> public static String nazwaUczelni = "AGH";
      Wywolanie pola statycznego w innej klasie-> String uczelniaMarcina = student1.nazwaUczelni;

      METODY STATYCZNE - Charakterystyczne dla klasy a nie z konkretnymi obiektami klasy. Nie mozna sie odwolac
      do pol ktore nie sa statyczne wewnatrz metody statycznej bo te pola sa charakterystyczne dla obiektu czyli
      przedstawiciela danej klasy a ta metode mozemy wywolac bez tworzenia obiektu
      W metodzie statycznej mozemy odwolywac sie jedynie do pol statycznych

      DZIEDZICZENIE - Podstawowy mechanizm porgramowania obiektowego. Dzieki temu mozemy utworzyc hierarchie klas
      ktora pozwoli nam na przekazanie pewnych cech klasy bazowej klasom potomnym. Np. dzieci dziedzicza po rodzicach
      czy dziadkach pewne cechy

      SUPER - slowo kluczowe, wywoluje konstruktor klasy nadrzednej. MUSI byc pierwsza operacja wewnatrz konstruktora
      klasy potomnej. Po nim mozna przypisywac kolejne argumenty

      NADPISYWANIE METOD - przesloniecie dzialania metody z klasy bazowej w klasie  potomnej, zdefiniowanie metody
      z ta sama nazwa ale innym dzialaniem

      PRZECIAZANIE METOD - definiowanie wewnatrz klasy kilku metod o tej samej nazwie i roznych parametrach

      PACZKI (PACKAGES) - kiedy wraz ze wzrostem funkcjonalnosci projektowanego system/aplikacji rosnie tez liczba
      klas, konieczne jest logiczne rozdzielenie tych klas na grupy reprezentujace jeden konkretny obszar aplikacji
      Pozwala rowniez na korzystanie z wielu klas o tych samych nazwach

      MODYFIKATORY DOSTEPU - public, private, protected oraz domyslny.
      W tej samej klasie mamy dostep do wszystkich rodzajow pol i metod niezaleznie od modyfikatora dostepu
      Dla klas dziedziczacych
      - Klasa potomna w tej samej paczce nie ma dostepu do pol private, ani do metod private (do pozostalych typow ma)
      - Klasa potomna w innej paczce nie ma dostepu do pola i metod typu private oraz default(bez identyfikatora)
      Dla klas niedziedziczacych - wywolywanie MUSI odbywac sie przez stworzenie obiektu klasy Parent
      - Klasa w tej samej paczce nie ma dostepu do pola private, ani do metod private (do pozostalych typow ma)
      - Klasa w innej paczce nie ma dostepu do pola i metod typu private, protected oraz default(bez identyfikatora)
      jedynie do public

      GETTERY I SETTERY:
      Gettery sluza do pobierania pol "tylko do odczytu"
      Settery to metody pozwalajace przypisywac dana wartosc do pola ktore jest prywatne

      FINAL - zmiennej typu final nie mozna zmienic wartosci ktora zostala do niej przypisana
      Jesli przypiszemy final do obiektu to mozemy zmieniac parametry obiektu, modyfikowac metody itd., ale
      nie mozemy do tej zmiennej przypisac nowej osoby/nowego obiektu.
      Jesli oznaczymy jakas klase jako final, nie da sie z niej dziedziczyc

      INTERFEJS - zestaw metod bez ich implementacji - okreslamy zwracany typ, nazwe metody ale nie zwracamy ciala
      metody, czyli calego kodu ktory jest w srodku. Cialo metody bedzie dostarczone przez klasy ktore beda
      implementowaly nasz interfejs.
      Na chlopski rozum to jest taki twor ktory tworzy bazowe metody o tych samych nazwach
      odnoszace sie do grupy klas tego samego typu, np. rower,osobowka, motor jako klasy wchodza w
      sklad grupy(Interfejsu) Pojazdy, bo kazdy pojazd ma funkcje " jedz z okreslona predkoscia"
      i juz w klasie main wywolujemy metody z konkretnych klas z okreslonym parametrem a to wszystko bazuje
      na 1 interfejsie

      POLIMORFIZM - jesli podamy typ ktory moze byc interfejsem lub klasa bazowa to ten typ moze miec kilka postaci,
      moze to byc kazda z klas ktora implementuje interfejs, lub kazda z klas ktora rozszerza dana klase.
      W zaleznosci od tego jaki obiekt konkretnej klasy stworzymy to zachowanie aplikacji sie zmienia.

      KLASA ABSTRAKCYJNA - pewne uogolnienie innych klas i jest to klasa ktora nie ma swoich reprezentantow
      w postaci obiektow czyli nie mozemy stowrzyc obiektow klasy abstrakcyjnej. Klasa abstrakcyjna moze
      zawierac metody abstrakcyjne czyli takie ktore nie maja implementacji. Tak jak mielismy w interfejsie tylko
      deklaracje metody bez jej implementacji, tak w klasie abstrakcyjnej mozemy miec taka metode abstrakcyjna
      ktora tez nie ma implementacji i ta implementacja musi zostac dostarczona w klasach ktore dziedzicza
      po naszej klasie abstrakcyjnej. Poza metodami abstrakcyjnymi klasa ta moze zawierac stale oznaczone slowami
      kluczowymi static final, ale moze tez zawierac zwykle metody ktore beda mialy jakas swoja implementacje

      KONWERSJA DANYCH - konwersja niejawna - bezproblemowo konwertujemy np. typ int na typ double (po prostu
      rozszerzamy liczbe calkowita o zera po przecinku)
      - konwersja jawna - np. z double do int jawnie deklarujemy ze godizmy sie z utrata pewnych informacji
      zapis tego wyglada np. tak: int d = a/(int)b - ten nawias narzuca ze godzimy sie z tym zeby np. doubla
      przekonwertowalo do inta

      WYJÄ„TEK - specjalna sytuacja ktora moze spowodowac zatrzymanie naszego programu

      ENUM - Typ wyliczeniowy, ktory umozliwia w Javie zadeklarowanie ograniczonej liczby mozliwych wartosci

      KLASA ANONIMOWA - to klasa definiowana w kodzie ktora ma dokladnie 1 instancje tzn dokladnie 1 obiekt
      Musimy dostarczyc od razu implementacje metod ktore byly zdefiniowane w konkretnym interfejsie

      WYRAZENIA LAMBDA - pozwalaja pisac kod w sposob bardziej zwiezly. Kod zyskuje na czytelnosci i jest
      latwiejszy w utrzymaniu. Jest to krotka forma zapisania klasy anonimowej ktora jest implementacja
      interfejsu posiadajacego tylko i wylacznie 1 metode. Z wyrazenia lambda korzysta sie m.in. w strumieniach

      STRUMIENIE - sluza do przetwarzania danych i w strumien mozemy opakowac dowolny zestaw danych i mozemy
      pozniej wykonywac jakies operacje na tych danych, przetwarzac te dane. Operacje zwiazane ze strumieniami
      mozemy podzielic na 3 grupy:
      1. Operacje odpowiedzialne za stworzenie strumienia
      2. Przetwarzanie danych wewnatrz strumienia
      3. Zakonczenie strumienia

      KOLEKCJE - to implementacje tzw. struktur danych, w standardowej bibliotece Javy implementuja rozne
      interfejsy.

      KOLEKCJE - LISTA - podobnie jak tablica grupuje elementy, nie musimy sie jednak przejmowac rozmiarem listy
      poniewaz bedzie sie ona automatycznie powiekszala, wraz z dodawaniem nowych elementow, czyli przy tworzeniu
      listy nie bedziemy deklarowac jak duza ma byc to lista - tak musielismy robic w przypadku tablicy
      Kolejnosc dodawania elementow ma tutaj znaczenie poniewaz kazdy nowy element bedzie mial swoj indeks i
      zaczynamy numerowac od 0 jak w przypadku tablicy. Dwie najczesciej wystepujace implementacje interfejsu
      listy to ArrayList i LinkedList.
      ArrayList - uzywamy gdy nasza aplikacja odczytuje jakies dane wielokrotnie z tej listy, gdy nasza aplikacja
      skupia sie bardziej na czytaniu danych to korzystamy z ArrayListy
      LinkedList - uzywamy w przypadku gdy np. chcemy usuwac dane z listy to korzystamy z tej opcji.

      KOLEKCJE - ZBIORY - to kolekcje sluzace do przechowywania unikalnych elementow, czyli nie mozemy miec tutaj
      duplikatow. W listach jest to dopuszczalne natomiast w zbiorach juz nie. Zbiory w jezyku Java implementuja
      interfejs Set i w przypadku zbioru nie jest istotna kolejnosc dodawanych elementow. Nie bedziemy mieli tutaj
      indeksow dla tych elementow, nie bedziemy w stanie pobrac elementu na podstawie indeksu gdyz tu kolejnosc nie
      gra roli. Najpopularniejsza implementacja interfejsu Set jest HashSet, ale mamy takze taka implementacje
      jak LinkedHashSet.

      KOLEKCJE - MAPY - jest to kolekcja przechowujaca pary klucz-wartosc. W mapie trzymamy klucze, ktorym
      odpowiadaja jakies wartosci. Wazna rzecza jest to, ze klucze musze byc unikalne, a wartosci moga sie
      powtarzac. Najpopularniejsza implementacja Mapy to HashMap
